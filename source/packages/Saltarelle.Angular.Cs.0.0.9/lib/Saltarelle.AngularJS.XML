<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Saltarelle.AngularJS</name>
    </assembly>
    <members>
        <!-- Commento XML in formato non corretto ignorato per il membro "P:AngularJS.Cookies.Cookie.Item(System.String)" -->
        <!-- Commento XML in formato non corretto ignorato per il membro "M:AngularJS.Cookies.CookieStore.get(System.String)" -->
        <!-- Commento XML in formato non corretto ignorato per il membro "M:AngularJS.Cookies.CookieStore.get``1(System.String)" -->
        <!-- Commento XML in formato non corretto ignorato per il membro "M:AngularJS.Cookies.CookieStore.put(System.String,System.Object)" -->
        <!-- Commento XML in formato non corretto ignorato per il membro "M:AngularJS.Cookies.CookieStore.remove(System.String)" -->
        <member name="T:AngularJS.Attributes">
            <summary>
            $compile.directive.Attributes 
            A shared object between directive compile / linking functions which contains normalized DOM element attributes.    
            </summary>
        </member>
        <member name="M:AngularJS.Attributes.addClass(System.String)">
            <summary>
            Adds the CSS class value specified by the classVal parameter to the element. If animations are enabled then an animation will be triggered for the class addition.
            </summary>
        </member>
        <member name="M:AngularJS.Attributes.removeClass(System.String)">
            <summary>
            Removes the CSS class value specified by the classVal parameter from the element. If animations are enabled then an animation will be triggered for the class removal.
            </summary>
        </member>
        <member name="M:AngularJS.Attributes.updateClass(System.String,System.String)">
            <summary>
            Adds and removes the appropriate CSS class values to the element based on the difference between the new and old CSS class values (specified as newClasses and oldClasses).
            </summary>
        </member>
        <member name="M:AngularJS.Attributes.observe(System.String,System.Action{System.String})">
            <summary>
            Observe an interpolated attribute. The observer will never be called, if given attribute is not interpolated.
            </summary>
        </member>
        <member name="M:AngularJS.Attributes.set(System.String,System.String)">
            <summary>
            Set DOM element attribute value.
            </summary>
        </member>
        <member name="M:AngularJS.Attributes.set(System.String,System.Boolean)">
            <summary>
            Set DOM element attribute value.
            </summary>
        </member>
        <member name="T:AngularJS.NgModelController">
            <summary>
            Provides API for the `ng-model` directive.
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.render">
            <summary>
            Called when the view needs to be updated. It is expected that the user of the ng-model directive will implement this method.
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.isEmpty">
            <summary>
            This is called when we need to determine if the value of the input is empty.
            </summary>
        </member>
        <member name="M:AngularJS.NgModelController.setValidity(System.String,System.Boolean)">
            <summary>
            Change the validity state, and notifies the form when the control changes validity. 
            </summary>
        </member>
        <member name="M:AngularJS.NgModelController.setPristine">
            <summary>
            Sets the control to its pristine state.
            </summary>
        </member>
        <member name="M:AngularJS.NgModelController.setUntouched">
            <summary>
            Sets the control to its untouched state.
            </summary>
        </member>
        <member name="M:AngularJS.NgModelController.setTouched">
            <summary>
            Sets the control to its touched state.
            </summary>
        </member>
        <member name="M:AngularJS.NgModelController.rollbackViewValue">
            <summary>
            Cancel an update and reset the input element's value to prevent an update to the $modelValue,
            </summary>
        </member>
        <member name="M:AngularJS.NgModelController.validate">
            <summary>
            Runs each of the registered validations set on the $validators object.
            </summary>
        </member>
        <member name="M:AngularJS.NgModelController.commitViewValue">
            <summary>
            Commit a pending update to the $modelValue.
            </summary>
        </member>
        <member name="M:AngularJS.NgModelController.setViewValue(System.String,System.String)">
            <summary>
            Update the view value.
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.viewValue">
            <summary>
            Actual string value in the view.
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.modelValue">
            <summary>
            The value in the model, that the control is bound to.
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.parsers">
            <summary>
            Array of functions to execute, as a pipeline, whenever the control reads value from the DOM
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.formatters">
            <summary>
            Array of functions to execute, as a pipeline, whenever the model value changes. 
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.validators">
            <summary>
            A collection of validators that are applied whenever the model value changes. 
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.viewChangeListeners">
            <summary>
            Array of functions to execute whenever the view value has changed.
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.error">
            <summary>
            An object hash with all errors as keys.
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.untouched">
            <summary>
            True if control has not lost focus yet.
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.touched">
            <summary>
            True if control has lost focus.
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.pristine">
            <summary>
            True if user has not interacted with the control yet.
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.dirty">
            <summary>
            True if user has already interacted with the control.
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.valid">
            <summary>
            True if there is no error.
            </summary>
        </member>
        <member name="F:AngularJS.NgModelController.invalid">
            <summary>
            True if at least one error on the control.
            </summary>
        </member>
        <member name="M:AngularJS.Cache.put(System.String,System.Object)">
            <summary>
            Inserts a named entry into the Cache object to be retrieved later, and incrementing the size of the cache if the key was not already present in the cache. 
            </summary>
        </member>
        <member name="M:AngularJS.Cache.get(System.String)">
            <summary>
            Retrieves named data stored in the Cache object.
            </summary>
        </member>
        <member name="M:AngularJS.Cache.get``1(System.String)">
            <summary>
            Retrieves named data stored in the Cache object.
            </summary>
        </member>
        <member name="M:AngularJS.Cache.remove(System.String)">
            <summary>
            Removes an entry from the Cache object.
            </summary>
        </member>
        <member name="M:AngularJS.Cache.removeAll">
            <summary>
            Clears the cache object of any entries.
            </summary>
        </member>
        <member name="M:AngularJS.Cache.destroy">
            <summary>
            Destroys the Cache object entirely, removing it from the $cacheFactory set.
            </summary>
        </member>
        <member name="M:AngularJS.Cache.info">
            <summary>
            Retrieve information regarding a particular Cache.
            </summary>
        </member>
        <member name="T:AngularJS.InjectAttribute">
            <summary>
            Specify dependency injection for the class
            </summary>
        </member>
        <member name="T:AngularJS.Injectable">
            <summary>
              Exposes the $inject property field to injectable JavaScript functions
            </summary>
        </member>
        <member name="F:AngularJS.Event.TargetScope">
            <summary>
            the scope on which the event was $emit-ed or $broadcast-ed.
            </summary>      
        </member>
        <member name="F:AngularJS.Event.CurrentScope">
            <summary>
            the current scope which is handling the event.
            </summary>  
        </member>
        <member name="F:AngularJS.Event.Name">
            <summary>
            Name of the event.
            </summary>  
        </member>
        <member name="F:AngularJS.Event.StopPropagation">
            <summary>
            calling stopPropagation function will cancel further event propagation (available only for events that were $emit-ed).
            </summary>  
        </member>
        <member name="F:AngularJS.Event.PreventDefault">
            <summary>
            calling preventDefault sets defaultPrevented flag to true.
            </summary>  
        </member>
        <member name="F:AngularJS.Event.DefaultPrevented">
            <summary>
            true if preventDefault was called.   
            </summary>  
        </member>
        <member name="T:AngularJS.FormController">
            <summary>
            keeps track of all its controls and nested forms as well as the state of them, such as being valid/invalid or dirty/pristine.
            Each form directive creates an instance of FormController.
            </summary>
        </member>
        <member name="M:AngularJS.FormController.rollbackViewValue">
            <summary>
            Rollback all form controls pending updates to the $modelValue.
            </summary>
        </member>
        <member name="M:AngularJS.FormController.commitViewValue">
            <summary>
            Commit all form controls pending updates to the $modelValue.
            </summary>
        </member>
        <member name="M:AngularJS.FormController.addControl">
            <summary>
            Register a control with the form.
            </summary>
        </member>
        <member name="M:AngularJS.FormController.removeControl">
            <summary>
            Deregister a control from the form.
            </summary>
        </member>
        <member name="M:AngularJS.FormController.setValidity">
            <summary>
            Sets the validity of a form control.
            </summary>
        </member>
        <member name="M:AngularJS.FormController.setDirty">
            <summary>
            Sets the form to a dirty state.
            </summary>
        </member>
        <member name="M:AngularJS.FormController.setPristine">
            <summary>
            Sets the form to its pristine state.
            </summary>
        </member>
        <member name="M:AngularJS.FormController.setSubmitted">
            <summary>
            Sets the form to its submitted state.
            </summary>
        </member>
        <member name="F:AngularJS.FormController.pristine">
            <summary>
            True if user has not interacted with the form yet.
            </summary>
        </member>
        <member name="F:AngularJS.FormController.dirty">
            <summary>
            True if user has already interacted with the form.
            </summary>
        </member>
        <member name="F:AngularJS.FormController.valid">
            <summary>
            True if all of the containing forms and controls are valid.
            </summary>
        </member>
        <member name="F:AngularJS.FormController.invalid">
            <summary>
            True if at least one containing control or form is invalid.
            </summary>
        </member>
        <member name="F:AngularJS.FormController.error">
            <summary>
            An object hash, containing references to all invalid controls or forms,
            </summary>
        </member>
        <member name="T:AngularJS.Filter">
            <summary>
            Retrieves a filtering function by giving the filter name
            </summary>
        </member>
        <member name="T:AngularJS.FilterFunction">
            <summary>
            Filters a string
            </summary>
        </member>
        <member name="P:AngularJS.Locale.id">
            <summary>
            locale id formatted as languageId-countryId (e.g. en-us)
            </summary>
        </member>
        <member name="M:AngularJS.Interpolate.Call(System.String)">
            <summary>
            Compiles a string with markup into an interpolation function.
            </summary>
        </member>
        <member name="M:AngularJS.Interpolate.Call(System.String,System.Boolean)">
            <summary>
            Compiles a string with markup into an interpolation function.
            </summary>
        </member>
        <member name="M:AngularJS.Interpolate.Call(System.String,System.Boolean,System.String)">
            <summary>
            Compiles a string with markup into an interpolation function.
            </summary>
        </member>
        <member name="M:AngularJS.Interpolate.Call(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Compiles a string with markup into an interpolation function.
            </summary>
        </member>
        <member name="M:AngularJS.Interpolate.startSymbol">
            <summary>
            Symbol to denote the start of expression in the interpolated string. Defaults to {{.
            </summary>
        </member>
        <member name="M:AngularJS.Interpolate.endSymbol">
            <summary>
            Symbol to denote the end of expression in the interpolated string. Defaults to }}.
            </summary>
        </member>
        <member name="T:AngularJS.Parse">
            <summary>
            Converts Angular expression into a function.
            Returns a function(context,locals) which represents the compiled expression:
            </summary>
        </member>
        <member name="F:AngularJS.ParsedFunction.literal">
            <summary>
            whether the expression's top-level node is a JavaScript literal.
            </summary>
        </member>
        <member name="F:AngularJS.ParsedFunction.constant">
            <summary>
            whether the expression is made entirely of JavaScript constant literals.
            </summary>
        </member>
        <member name="F:AngularJS.ParsedFunction.assign">
            <summary>
            {?function(context, value)} – if the expression is assignable, this will be set to a function to change its value on the given context.         
            </summary>
        </member>
        <member name="M:AngularJS.Interval.Set(System.Action)">
            <summary>
            Angular's wrapper for window.setInterval. The fn function is executed every delay milliseconds.
            Returns a promise which will be notified on each iteration.
            </summary>
        </member>
        <member name="M:AngularJS.Interval.Set(System.Action,System.Int32)">
            <summary>
            Angular's wrapper for window.setInterval. The fn function is executed every delay milliseconds.
            Returns a promise which will be notified on each iteration.
            </summary>
        </member>
        <member name="M:AngularJS.Interval.Set(System.Action,System.Int32,System.Int32)">
            <summary>
            Angular's wrapper for window.setInterval. The fn function is executed every delay milliseconds.
            Returns a promise which will be notified on each iteration.
            </summary>
        </member>
        <member name="M:AngularJS.Interval.Set(System.Action,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Angular's wrapper for window.setInterval. The fn function is executed every delay milliseconds.
            Returns a promise which will be notified on each iteration.
            </summary>
        </member>
        <member name="M:AngularJS.Interval.Cancel(AngularJS.Promise)">
            <summary>
            Cancels a task associated with the promise. As a result of this, the promise will be resolved with a rejection.
            Returns true if the task hasn't executed yet and was successfully canceled.
            </summary>
        </member>
        <member name="M:AngularJS.Log.log(System.String)">
            <summary>
            Write a log message
            </summary>
        </member>
        <member name="M:AngularJS.Log.info(System.String)">
            <summary>
            Write an information message
            </summary>
        </member>
        <member name="M:AngularJS.Log.warn(System.String)">
            <summary>
            Write a warning message
            </summary>
        </member>
        <member name="M:AngularJS.Log.error(System.String)">
            <summary>
            Write an error message
            </summary>
        </member>
        <member name="M:AngularJS.Log.debug(System.String)">
            <summary>
            Write a debug message
            </summary>
        </member>
        <!-- Commento XML in formato non corretto ignorato per il membro "M:AngularJS.CacheFactory.Create(System.String)" -->
        <!-- Commento XML in formato non corretto ignorato per il membro "M:AngularJS.CacheFactory.Create(System.String,System.Object)" -->
        <!-- Commento XML in formato non corretto ignorato per il membro "M:AngularJS.CacheFactory.info" -->
        <!-- Commento XML in formato non corretto ignorato per il membro "M:AngularJS.CacheFactory.get(System.String)" -->
        <member name="M:AngularJS.Timeout.Cancel(AngularJS.Promise)">
            <summary>
            Cancels a task associated with the promise. As a result of this, the promise will be resolved with a rejection.
            Returns true if the task hasn't executed yet and was successfully canceled.
            </summary>
        </member>
        <member name="T:AngularJS.jqLiteApi.jQueryEventHandler">
            <summary>
            Handles a jQuery event.
            </summary>
        </member>
        <member name="T:AngularJS.jqLiteApi.jQueryEventHandlerWithContext">
            <summary>
            Handles a jQuery event, and promotes the 'this' in Javascript to a parameter.
            </summary>
        </member>
        <member name="T:AngularJS.jqLiteApi.StringFunction">
            <summary>
            A callback that returns a value for the element at the specified index.
            </summary>
            <param name="index">The index of the element in the set.</param>
        </member>
        <member name="T:AngularJS.jqLiteApi.StringFunctionWithContext">
            <summary>
            A callback that returns a value for the element at the specified index.
            </summary>
            <param name="element">Element for which the function is being invoked, in script represented as 'this'.</param>
            <param name="index">The index of the element in the set.</param>
        </member>
        <member name="T:AngularJS.jqLiteApi.StringReplaceFunction">
            <summary>
            A callback that returns a value for the element at the specified index.
            </summary>
            <param name="index">The index of the element in the set.</param>
            <param name="currentValue">The current value.</param>
        </member>
        <member name="T:AngularJS.jqLiteApi.StringReplaceFunctionWithContext">
            <summary>
            A callback that returns a value for the element at the specified index.
            </summary>
            <param name="element">Element for which the function is being invoked, in script represented as 'this'.</param>
            <param name="index">The index of the element in the set.</param>
            <param name="currentValue">The current value.</param>
        </member>
        <member name="M:AngularJS.jElement.addClass(System.String)">
            <summary>
            Adds the specified class(es) to each of the set of matched elements.
            </summary>
            <param name="className">The class or classes to add.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.addClass(AngularJS.jqLiteApi.StringFunction)">
            <summary>
            Adds the CSS class returned by the specified function.
            </summary>
            <param name="cssFunction">The function that returns the CSS class to add.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.addClass(AngularJS.jqLiteApi.StringFunctionWithContext)">
            <summary>
            Adds the CSS class returned by the specified function.
            </summary>
            <param name="cssFunction">The function that returns the CSS class to add.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.AddClass(AngularJS.jqLiteApi.StringReplaceFunction)">
            <summary>
            Adds the CSS class returned by the specified function.
            </summary>
            <param name="cssFunction">The function that returns the CSS class to add.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.addClass(AngularJS.jqLiteApi.StringReplaceFunctionWithContext)">
            <summary>
            Adds the CSS class returned by the specified function.
            </summary>
            <param name="cssFunction">The function that returns the CSS class to add.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.after(System.String)">
            <summary>
            Insert content after each element of the matching elements.
            </summary>
            <param name="content">The content to insert.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.after(AngularJS.jElement)">
            <summary>
            Insert content after each element of the matching elements.
            </summary>
            <param name="content">The jElement containing the content.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.after(AngularJS.jqLiteApi.StringFunction)">
            <summary>
            Insert content returned from the specified function after each element
            of the matching elements.
            </summary>
            <param name="contentFunction">The function that returns the content to insert.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.after(AngularJS.jqLiteApi.StringFunctionWithContext)">
            <summary>
            Insert content returned from the specified function after each element
            of the matching elements.
            </summary>
            <param name="contentFunction">The function that returns the content to insert.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.append(System.String)">
            <summary>
            Insert content to the end of each element of the matching elements.
            </summary>
            <param name="content">The content to append.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.append(System.Html.Element)">
            <summary>
            Insert content to the end of each element of the matching elements.
            </summary>
            <param name="content">The DOM element to append.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.append(AngularJS.jElement)">
            <summary>
            Insert content to the end of each element of the matching elements.
            </summary>
            <param name="content">The jElement containing the content.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.append(AngularJS.jqLiteApi.StringFunction)">
            <summary>
            Insert content returned from the specified function to end end of each element
            of the matching elements.
            </summary>
            <param name="contentFunction">The function that returns the content to append.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.append(AngularJS.jqLiteApi.StringFunctionWithContext)">
            <summary>
            Insert content returned from the specified function to end end of each element
            of the matching elements.
            </summary>
            <param name="contentFunction">The function that returns the content to append.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.append(AngularJS.jqLiteApi.StringReplaceFunction)">
            <summary>
            Insert content returned from the specified function to end end of each element
            of the matching elements.
            </summary>
            <param name="contentFunction">The function that returns the content to append.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.append(AngularJS.jqLiteApi.StringReplaceFunctionWithContext)">
            <summary>
            Insert content returned from the specified function to end end of each element
            of the matching elements.
            </summary>
            <param name="contentFunction">The function that returns the content to append.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.attr(System.String,System.String)">
            <summary>
            Sets the specified attribute value to the specified value on
            the set of matched elements.
            </summary>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="value">The value of the attribute.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.attr(System.Collections.JsDictionary)">
            <summary>
            Sets the specified attributes to the set of matched elements.
            </summary>
            <param name="nameValueMap">The list of names and values of the attributes to set.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.attr(System.String,AngularJS.jqLiteApi.StringFunction)">
            <summary>
            Sets the specified attributes to the value returned from the specified function.
            </summary>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="attrFunction">The function returning the attribute values.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.attr(System.String,AngularJS.jqLiteApi.StringFunctionWithContext)">
            <summary>
            Sets the specified attributes to the value returned from the specified function.
            </summary>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="attrFunction">The function returning the attribute values.</param>
            <returns>The current jElement.</returns>        
        </member>
        <member name="M:AngularJS.jElement.attr(System.String,AngularJS.jqLiteApi.StringReplaceFunction)">
            <summary>
            Sets the specified attributes to the value returned from the specified function.
            </summary>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="attrFunction">The function returning the attribute values.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.attr(System.String,AngularJS.jqLiteApi.StringReplaceFunctionWithContext)">
            <summary>
            Sets the specified attributes to the value returned from the specified function.
            </summary>
            <param name="attributeName">The name of the attribute to set.</param>
            <param name="attrFunction">The function returning the attribute values.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.bind(System.String,AngularJS.jqLiteApi.jQueryEventHandler)">
            <summary>
            Attaches a handler for handling the specified event on the matched set of elements.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="eventHandler">The event handler to be invoked.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.bind(System.String,System.Collections.JsDictionary,AngularJS.jqLiteApi.jQueryEventHandler)">
            <summary>
            Attaches a handler for the specified event on the matched set of elements.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="eventData">Any data that needs to be passed to the event handler.</param>
            <param name="eventHandler">The event handler to be invoked.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.bind(System.String,System.Boolean)">
            <summary>
            Attaches a handler that prevents default behavior and stops event bubbling for
            the specified event on the matched set of elements.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="result">Should be false.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.children">
            <summary>
            Gets a jElement representing the children of the matched set of elements.
            </summary>
            <returns>The new jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.children(System.String)">
            <summary>
            Gets a jElement representing the children of the matched set of elements.
            </summary>
            <param name="selector">The selector to match children against.</param>
            <returns>The new jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.clone">
            <summary>
            Creates a clone of the current jElement and the matching elements it
            represents.
            </summary>
            <returns>The cloned jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.clone(System.Boolean)">
            <summary>
            Creates a clone of the current jElement and the matching elements it
            represents.
            </summary>
            <param name="withDataAndEvents">Whether event handlers and element data should be copied over.</param>
            <returns>The cloned jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.clone(System.Boolean,System.Boolean)">
            <summary>
            Creates a clone of the current jElement and the matching elements it
            represents.
            </summary>
            <param name="withDataAndEvents">Whether event handlers and element data should be copied over.</param>
            <param name="deepWithDataAndEvents">Whether event handlers and element data for all children should be copied over.</param>
            <returns>The cloned jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.contents">
            <summary>
            Gets a jElement representing the content of the matched set of elements
            including text nodes.
            </summary>
            <returns>The new jElement with added elements.</returns>
        </member>
        <member name="M:AngularJS.jElement.css(System.String,System.String)">
            <summary>
            Sets the specified CSS attribute value to the specified value on
            the set of matched elements.
            </summary>
            <param name="attributeName">The name of the CSS attribute to set.</param>
            <param name="value">The value of the CSS attribute.</param>
            <returns>The current jElement.</returns>        
        </member>
        <member name="M:AngularJS.jElement.css(System.String,System.Int32)">
            <summary>
            Sets the specified CSS attribute value to the specified value on
            the set of matched elements.
            </summary>
            <param name="attributeName">The name of the CSS attribute to set.</param>
            <param name="value">The value of the CSS attribute.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.css(System.String,AngularJS.jqLiteApi.StringFunction)">
            <summary>
            Sets the specified CSS attribute value to the values returned by the
            specified function on the set of matched elements.
            </summary>
            <param name="attributeName">The name of the CSS attribute to set.</param>
            <param name="valueFunction">The function returning attribute values.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.css(System.String,AngularJS.jqLiteApi.StringFunctionWithContext)">
            <summary>
            Sets the specified CSS attribute value to the values returned by the
            specified function on the set of matched elements.
            </summary>
            <param name="attributeName">The name of the CSS attribute to set.</param>
            <param name="valueFunction">The function returning attribute values.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.css(System.String,AngularJS.jqLiteApi.StringReplaceFunction)">
            <summary>
            Sets the specified CSS attribute value to the values returned by the
            specified function on the set of matched elements.
            </summary>
            <param name="attributeName">The name of the CSS attribute to set.</param>
            <param name="valueFunction">The function returning attribute values.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.css(System.String,AngularJS.jqLiteApi.StringReplaceFunctionWithContext)">
            <summary>
            Sets the specified CSS attribute value to the values returned by the
            specified function on the set of matched elements.
            </summary>
            <param name="attributeName">The name of the CSS attribute to set.</param>
            <param name="valueFunction">The function returning attribute values.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.css(System.Collections.JsDictionary)">
            <summary>
            Sets the specified CSS attributes to the set of matched elements.
            </summary>
            <param name="nameValueMap">The list of names and values of the CSS attributes to set.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.data(System.String,System.Object)">
            <summary>
            Sets the specified value as data on the matching set of elements.
            </summary>
            <param name="key">The key used to store value.</param>
            <param name="value">The value to store.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.data(System.Collections.JsDictionary)">
            <summary>
            Sets the specified name/value pairs as data on the matching set of elements.
            This extends any existing data on the element.
            </summary>
            <param name="data">The set of name/value pairs to set.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.empty">
            <summary>
            Removes all child elements of the matching set of elements.
            </summary>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.eq(System.Int32)">
            <summary>
            Reduce the set of matched elements to a single element.
            </summary>
            <param name="index">The index of the element. Use negative to count backwards.</param>
            <returns>A new jElement wrapping the specified element.</returns>
        </member>
        <member name="M:AngularJS.jElement.find(System.Html.Element)">
            <summary>
            Returns a new jElement with descendents of each matched element filtered
            by the specified element.
            This traverses down multiple levels of the tree.
            </summary>
            <param name="element">The element to match against.</param>
            <returns>The new jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.find(AngularJS.jElement)">
            <summary>
            Returns a new jElement with descendents of each matched element filtered
            by the specified matched set of elements.
            This traverses down multiple levels of the tree.
            </summary>
            <param name="elements">The matched set of elements to lookup.</param>
            <returns>The new jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.find(System.String)">
            <summary>
            Returns a new jElement with descendents of each matched element filtered
            by the specified selector. This traverses down multiple levels of the tree.
            </summary>
            <param name="selector">The selector used to match elements.</param>
            <returns>The new jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.hasClass(System.String)">
            <summary>
            Determine whether any of the matched elements are assigned the given class.
            </summary>
            <param name="className">The class name to search for.</param>
            <returns>true if the class name is found; false otherwise.</returns>
        </member>
        <member name="M:AngularJS.jElement.html(System.String)">
            <summary>
            Sets the HTML content of the matched set of elements.
            </summary>
            <param name="html">The new HTML to set.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.html(AngularJS.jElement)">
            <summary>
            Sets the HTML content of the matched set of elements to the markup represented
            by the specified element.
            </summary>
            <param name="html">The new HTML to set.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.html(AngularJS.jqLiteApi.StringFunction)">
            <summary>
            Sets the HTML content of the matched set of elements by calling the specified
            function.
            </summary>
            <param name="htmlFunction">The function that returns the HTML content.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.html(AngularJS.jqLiteApi.StringFunctionWithContext)">
            <summary>
            Sets the HTML content of the matched set of elements by calling the specified
            function.
            </summary>
            <param name="htmlFunction">The function that returns the HTML content.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.html(AngularJS.jqLiteApi.StringReplaceFunction)">
            <summary>
            Sets the HTML content of the matched set of elements by calling the specified
            function.
            </summary>
            <param name="htmlFunction">The function that returns the HTML content.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.html(AngularJS.jqLiteApi.StringReplaceFunctionWithContext)">
            <summary>
            Sets the HTML content of the matched set of elements by calling the specified
            function.
            </summary>
            <param name="htmlFunction">The function that returns the HTML content.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.next">
            <summary>
            Gets a jElement representing the immediate following sibling
            element of the matched set of elements.
            </summary>
            <returns>The new jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.next(System.String)">
            <summary>
            Gets a jElement representing the immediate following sibling
            element of the matched set of elements filtered by the specified selector.
            </summary>
            <param name="selector">The selector to match children against.</param>
            <returns>The new jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.off(System.Collections.JsDictionary)">
            <summary>
            Removes an event handler which has been created by called On()
            </summary>
            <param name="eventsMap">A dictionary in which the string keys represent the event names, and the values represent the handler which was previously attached to that event</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.off(System.Collections.JsDictionary,System.String)">
            <summary>
            Removes an event handler which has been created by called On()
            </summary>
            <param name="eventsMap">A dictionary in which the string keys represent the event names, and the values represent the handler which was previously attached to that event</param>
            <param name="selector">A selector which should match the one originally passed to On()</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.Off(System.String)">
            <summary>
            Removes an event handler which has been created by called On()
            </summary>
            <param name="events">One or more space-separated event types and optional namespaces</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.off(System.String,System.String)">
            <summary>
            Removes an event handler which has been created by called On()
            </summary>
            <param name="events">One or more space-separated event types and optional namespaces</param>
            <param name="selector">A selector which should match the one originally passed to On()</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.off(System.String,System.String,AngularJS.jqLiteApi.jQueryEventHandler)">
            <summary>
            Removes an event handler which has been created by called On()
            </summary>
            <param name="events">One or more space-separated event types and optional namespaces</param>
            <param name="selector">A selector which should match the one originally passed to On()</param>
            <param name="eventHandler">A handler function previously attached for the event(s)</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.off(System.String,System.String,AngularJS.jqLiteApi.jQueryEventHandlerWithContext)">
            <summary>
            Removes an event handler which has been created by called On()
            </summary>
            <param name="events">One or more space-separated event types and optional namespaces</param>
            <param name="selector">A selector which should match the one originally passed to On()</param>
            <param name="eventHandler">A handler function previously attached for the event(s)</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.on(System.String,AngularJS.jqLiteApi.jQueryEventHandler)">
            <summary>
            Attaches an event handler function for one or more events to the selected elements.
            </summary>
            <param name="eventName">The name of the event</param>
            <param name="eventHandler">The event handler to be invoked</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.on(System.String,AngularJS.jqLiteApi.jQueryEventHandlerWithContext)">
            <summary>
            Attaches an event handler function for one or more events to the selected elements.
            </summary>
            <param name="eventName">The name of the event</param>
            <param name="eventHandler">The event handler to be invoked</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.on(System.String,System.String,AngularJS.jqLiteApi.jQueryEventHandler)">
            <summary>
            Attaches an event handler function for one or more events to the selected elements.
            </summary>
            <param name="eventName">The name of the event</param>
            <param name="selector">A selector string to filter the descendants of the selected elements that trigger the event.</param>
            <param name="eventHandler">The event handler to be invoked</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.on(System.String,System.String,AngularJS.jqLiteApi.jQueryEventHandlerWithContext)">
            <summary>
            Attaches an event handler function for one or more events to the selected elements.
            </summary>
            <param name="eventName">The name of the event</param>
            <param name="selector">A selector string to filter the descendants of the selected elements that trigger the event.</param>
            <param name="eventHandler">The event handler to be invoked</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.on(System.String,System.String,System.Object,AngularJS.jqLiteApi.jQueryEventHandler)">
            <summary>
            Attaches an event handler function for one or more events to the selected elements.
            </summary>
            <param name="eventName">The name of the event</param>
            <param name="selector">A selector string to filter the descendants of the selected elements that trigger the event.</param>
            <param name="data">A custom data structure to be passed to the handler</param>
            <param name="eventHandler">The event handler to be invoked</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.on(System.String,System.String,System.Object,AngularJS.jqLiteApi.jQueryEventHandlerWithContext)">
            <summary>
            Attaches an event handler function for one or more events to the selected elements.
            </summary>
            <param name="eventName">The name of the event</param>
            <param name="selector">A selector string to filter the descendants of the selected elements that trigger the event.</param>
            <param name="data">A custom data structure to be passed to the handler</param>
            <param name="eventHandler">The event handler to be invoked</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.on(System.Collections.JsDictionary)">
            <summary>
            Attaches an event handler function for one or more events to the selected elements.
            </summary>
            <param name="eventsMap">A dictionary in which the string keys represent the event names, and the values represent the handler for that event.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.on(System.Collections.JsDictionary,System.String)">
            <summary>
            Attaches an event handler function for one or more events to the selected elements.
            </summary>
            <param name="eventsMap">A dictionary in which the string keys represent the event names, and the values represent the handler for that event.</param>
            <param name="selector">A selector string to filter the descendants of the selected elements that trigger the event.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.on(System.Collections.JsDictionary,System.String,System.Object)">
            <summary>
            Attaches an event handler function for one or more events to the selected elements.
            </summary>
            <param name="eventsMap">A dictionary in which the string keys represent the event names, and the values represent the handler for that event.</param>
            <param name="selector">A selector string to filter the descendants of the selected elements that trigger the event.</param>
            <param name="data">A custom data structure to be passed to the handler</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.one(System.String,AngularJS.jqLiteApi.jQueryEventHandler)">
            <summary>
            Attaches a handler for the handling the specified event once on the matched
            set of elements.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="eventHandler">The event handler to be invoked.</param>
            <returns></returns>
        </member>
        <member name="M:AngularJS.jElement.one(System.String,AngularJS.jqLiteApi.jQueryEventHandlerWithContext)">
            <summary>
            Attaches a handler for the handling the specified event once on the matched
            set of elements.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="eventHandler">The event handler to be invoked.</param>
            <returns></returns>
        </member>
        <member name="M:AngularJS.jElement.one(System.String,System.Collections.JsDictionary,AngularJS.jqLiteApi.jQueryEventHandler)">
            <summary>
            Attaches a handler for handling the specified event once on the matched set of elements.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="eventData">Any data that needs to be passed to the event handler.</param>
            <param name="eventHandler">The event handler to be invoked.</param>
            <returns></returns>
        </member>
        <member name="M:AngularJS.jElement.one(System.String,System.Collections.JsDictionary,AngularJS.jqLiteApi.jQueryEventHandlerWithContext)">
            <summary>
            Attaches a handler for handling the specified event once on the matched set of elements.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="eventData">Any data that needs to be passed to the event handler.</param>
            <param name="eventHandler">The event handler to be invoked.</param>
            <returns></returns>
        </member>
        <member name="M:AngularJS.jElement.parent">
            <summary>
            Gets a new jElement containing the parents of each of the matched elements.
            </summary>
            <returns>The new jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.parent(System.String)">
            <summary>
            Gets a new jElement containing the parents of each of the matched elements,
            filtered by the specified selector.
            </summary>
            <param name="selector">The selector to match elements.</param>
            <returns>The new jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.prepend(System.String)">
            <summary>
            Prepend content to the beginning of each element of the matching elements.
            </summary>
            <param name="content">The content to prepend.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.prepend(System.Html.Element)">
            <summary>
            Prepend content to the beginning of each element of the matching elements.
            </summary>
            <param name="content">The DOM element to prepend.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.prepend(System.Html.Element[])">
            <summary>
            Prepend content to the beginning of each element of the matching elements.
            </summary>
            <param name="content">The DOM elements to prepend.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.prepend(AngularJS.jElement)">
            <summary>
            Prepend content to the beginning of each element of the matching elements.
            </summary>
            <param name="content">The jElement containing the content.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.prepend(AngularJS.jqLiteApi.StringFunction)">
            <summary>
            Prepend content returned from the specified function to the beginning of each element
            of the matching elements.
            </summary>
            <param name="contentFunction">The function that returns the content to prepend.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.prepend(AngularJS.jqLiteApi.StringFunctionWithContext)">
            <summary>
            Prepend content returned from the specified function to the beginning of each element
            of the matching elements.
            </summary>
            <param name="contentFunction">The function that returns the content to prepend.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.prepend(AngularJS.jqLiteApi.StringReplaceFunction)">
            <summary>
            Prepend content returned from the specified function to the beginning of each element
            of the matching elements.
            </summary>
            <param name="contentFunction">The function that returns the content to prepend.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.prepend(AngularJS.jqLiteApi.StringReplaceFunctionWithContext)">
            <summary>
            Prepend content returned from the specified function to the beginning of each element
            of the matching elements.
            </summary>
            <param name="contentFunction">The function that returns the content to prepend.</param>
            <returns>The current jElement</returns>
        </member>
        <member name="M:AngularJS.jElement.prop(System.String,System.Object)">
            <summary>
            Sets the value of the specified property to the specified value on
            the matched set of elements.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value to set the property to.</param>
            <returns>The value of the specified property.</returns>        
        </member>
        <member name="M:AngularJS.jElement.remove">
            <summary>
            Removes the matched elements from the DOM, and removes jQuery data from elements.
            </summary>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.remove(System.String)">
            <summary>
            Removes the matching elements from the DOM, and removes jQuery data from elements.
            </summary>
            <param name="selector">The selector to use to filter the elements to remove.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.removeAttr(System.String)">
            <summary>
            Removes the specified attribute from each of the set of matched elements.
            </summary>
            <param name="attributeName">The attribute to remove.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.removeClass">
            <summary>
            Removes all classes from each of the set of matched elements.
            </summary>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.removeClass(System.String)">
            <summary>
            Removes the CSS class returned by the specified function.
            </summary>
            <param name="className">The class or classes to remove.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.removeClass(AngularJS.jqLiteApi.StringFunction)">
            <summary>
            Removes the class returned from the specified function for each of the set of matched elements.
            </summary>
            <param name="cssFunction">The function that returns the CSS class to remove.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.removeClass(AngularJS.jqLiteApi.StringFunctionWithContext)">
            <summary>
            Removes the class returned from the specified function for each of the set of matched elements.
            </summary>
            <param name="cssFunction">The function that returns the CSS class to remove.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.removeClass(AngularJS.jqLiteApi.StringReplaceFunction)">
            <summary>
            Removes the class returned from the specified function for each of the set of matched elements.
            </summary>
            <param name="cssFunction">The function that returns the CSS class to remove.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.removeClass(AngularJS.jqLiteApi.StringReplaceFunctionWithContext)">
            <summary>
            Removes the class returned from the specified function for each of the set of matched elements.
            </summary>
            <param name="cssFunction">The function that returns the CSS class to remove.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.removeData">
            <summary>
            Removes all the data from the matching set of elements.
            </summary>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.removeData(System.String)">
            <summary>
            Removes the specified data from the matching set of elements.
            </summary>
            <param name="key">The name of the value to remove.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.replaceWith(System.String)">
            <summary>
            Replace each element in the set of matched elements with the provided new content.
            </summary>
            <param name="content">The HTML to wrap with.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.replaceWith(System.Html.Element)">
            <summary>
            Replace each element in the set of matched elements with the new content provided
            by the specified element.
            </summary>
            <param name="content">The element containing the HTML to use.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.replaceWith(AngularJS.jElement)">
            <summary>
            Replace each element in the set of matched elements with the new content provided
            by the specified set of matched elements.
            </summary>
            <param name="content">The object containing the HTML to use.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.replaceWith(AngularJS.jqLiteApi.StringFunction)">
            <summary>
            Replace each element in the set of matched elements with the content returned from
            the specified function.
            </summary>
            <param name="contetntFunction">The functio returning the HTML to replace with.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.replaceWith(AngularJS.jqLiteApi.StringFunctionWithContext)">
            <summary>
            Replace each element in the set of matched elements with the content returned from
            the specified function.
            </summary>
            <param name="contetntFunction">The functio returning the HTML to replace with.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.text(System.String)">
            <summary>
            Sets the text content of the matched set of elements.
            </summary>
            <param name="text">The new text to set.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.text(AngularJS.jqLiteApi.StringFunction)">
            <summary>
            Sets the text content of the matched set of elements by calling the specified
            function.
            </summary>
            <param name="textFunction">The function that returns the text content.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.text(AngularJS.jqLiteApi.StringFunctionWithContext)">
            <summary>
            Sets the text content of the matched set of elements by calling the specified
            function.
            </summary>
            <param name="textFunction">The function that returns the text content.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.text(AngularJS.jqLiteApi.StringReplaceFunction)">
            <summary>
            Sets the text content of the matched set of elements by calling the specified
            function.
            </summary>
            <param name="textFunction">The function that returns the text content.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.text(AngularJS.jqLiteApi.StringReplaceFunctionWithContext)">
            <summary>
            Sets the text content of the matched set of elements by calling the specified
            function.
            </summary>
            <param name="textFunction">The function that returns the text content.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.ToArray">
            <summary>
            Returns the matching set of elements as an array.
            </summary>
            <returns>An array containing the matched elements.</returns>
        </member>
        <member name="M:AngularJS.jElement.toggleClass(System.String)">
            <summary>
            Toggles the specified class from each of the set of matched elements.
            </summary>
            <param name="className">The class to toggle.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.toggleClass(AngularJS.jqLiteApi.StringFunction)">
            <summary>
            Toggles the class returned from the function for the set of matched elements.
            </summary>
            <param name="cssFunction">The function returning the class to toggle.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.toggleClass(AngularJS.jqLiteApi.StringFunctionWithContext)">
            <summary>
            Toggles the class returned from the function for the set of matched elements.
            </summary>
            <param name="cssFunction">The function returning the class to toggle.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.toggleClass(AngularJS.jqLiteApi.StringReplaceFunction)">
            <summary>
            Toggles the class returned from the function for the set of matched elements.
            </summary>
            <param name="cssFunction">The function returning the class to toggle.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.toggleClass(AngularJS.jqLiteApi.StringReplaceFunctionWithContext)">
            <summary>
            Toggles the class returned from the function for the set of matched elements.
            </summary>
            <param name="cssFunction">The function returning the class to toggle.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.triggerHandler(System.String)">
            <summary>
            Triggers the first event handler attached for the first matched element.
            This does not trigger the default DOM behavior of the event.
            </summary>
            <param name="eventName">The event to trigger.</param>
            <returns>The result of the event handler.</returns>
        </member>
        <member name="M:AngularJS.jElement.triggerHandler(System.String,System.Object[])">
            <summary>
            Triggers the first event handler attached for the first matched element.
            This does not trigger the default DOM behavior of the event.
            </summary>
            <param name="eventName">The event to trigger.</param>
            <param name="eventParameters">Additional parameters for the event handler.</param>
            <returns>The result of the event handler.</returns>
        </member>
        <member name="M:AngularJS.jElement.unbind">
            <summary>
            Removes all event handlers attached to the matched set of elements
            </summary>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.unbind(System.String)">
            <summary>
            Detaches a handler for the specified event on the matched set of elements.
            </summary>
            <param name="eventName">The event to detach handlers for.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.unbind(AngularJS.jqLiteApi.jQueryEvent)">
            <summary>
            Detaches a handler for the specified event on the matched set of elements.
            </summary>
            <param name="e">The event passed in into an event handler.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.unbind(System.String,AngularJS.jqLiteApi.jQueryEventHandler)">
            <summary>
            Detaches a handler for the specified event on the matched set of elements.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="eventHandler">The event handler to be detached.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.unbind(System.String,AngularJS.jqLiteApi.jQueryEventHandlerWithContext)">
            <summary>
            Detaches a handler for the specified event on the matched set of elements.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="eventHandler">The event handler to be detached.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.unbind(System.String,System.Boolean)">
            <summary>
            Detaches the "return false" handler that was bound earlier.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="result">Should be false.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.val(System.String)">
            <summary>
            Sets the value attribute of the matched set of elements.
            </summary>
            <param name="value">The new value to set.</param>
            <returns>The current jElement.</returns>        
        </member>
        <member name="M:AngularJS.jElement.val(AngularJS.jqLiteApi.StringFunction)">
            <summary>
            Sets the value attribute of the matched set of elements using values returned
            from the specified function.
            </summary>
            <param name="valueFunction">The function returning the values to set.</param>
            <returns>The current jElement.</returns>        
        </member>
        <member name="M:AngularJS.jElement.val(AngularJS.jqLiteApi.StringFunctionWithContext)">
            <summary>
            Sets the value attribute of the matched set of elements using values returned
            from the specified function.
            </summary>
            <param name="valueFunction">The function returning the values to set.</param>
            <returns>The current jElement.</returns>        
        </member>
        <member name="M:AngularJS.jElement.val(AngularJS.jqLiteApi.StringReplaceFunction)">
            <summary>
            Sets the value attribute of the matched set of elements using values returned
            from the specified function.
            </summary>
            <param name="valueFunction">The function returning the values to set.</param>
            <returns>The current jElement.</returns>        
        </member>
        <member name="M:AngularJS.jElement.val(AngularJS.jqLiteApi.StringReplaceFunctionWithContext)">
            <summary>
            Sets the value attribute of the matched set of elements using values returned
            from the specified function.
            </summary>
            <param name="valueFunction">The function returning the values to set.</param>
            <returns>The current jElement.</returns>        
        </member>
        <member name="M:AngularJS.jElement.wrap(System.String)">
            <summary>
            Wraps an HTML structure around each of the matched set of elements.
            </summary>
            <param name="htmlSnippet">The HTML to wrap with.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.wrap(System.Html.Element)">
            <summary>
            Wraps a DOM element around each of the matched set of elements.
            </summary>
            <param name="element">A DOM element specifying the structure.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.wrap(AngularJS.jElement)">
            <summary>
            Wraps a jElement around each of the matched set of elements.
            </summary>
            <param name="element">A jElement specifying the structure.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.wrap(AngularJS.jqLiteApi.StringFunction)">
            <summary>
            Wraps an HTML structure around each of the matched set of elements as
            returned from the specified wrapping function.
            </summary>
            <param name="wrappingFunction">The functio returning the HTML to wrap with.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="M:AngularJS.jElement.wrap(AngularJS.jqLiteApi.StringFunctionWithContext)">
            <summary>
            Wraps an HTML structure around each of the matched set of elements as
            returned from the specified wrapping function.
            </summary>
            <param name="wrappingFunction">The functio returning the HTML to wrap with.</param>
            <returns>The current jElement.</returns>
        </member>
        <member name="P:AngularJS.jElement.context">
            <summary>
            Gets the Document or DOM element used as the context to match
            this set of elements.
            </summary>
        </member>
        <member name="P:AngularJS.jElement.length">
            <summary>
            Gets the number of elements in this <see cref="T:AngularJS.jElement"/>.
            </summary>
        </member>
        <member name="P:AngularJS.jElement.selector">
            <summary>
            Gets the selector used to match this set of elements.
            </summary>
        </member>
        <member name="P:AngularJS.jElement.Item(System.Int32)">
            <summary>
            Gets the matched element at the specified index.
            </summary>
            <param name="index">The index to lookup.</param>
            <returns>The DOM element at the specified index.</returns>
        </member>
        <member name="T:AngularJS.ScopeModes">
            <summary>
            Defines how the scope is associated with the directive
            </summary>     
        </member>
        <member name="F:AngularJS.ScopeModes.Existing">
            <summary>
            No scope is created, use the existing scope
            </summary>     
        </member>
        <member name="F:AngularJS.ScopeModes.New">
            <summary>
            A new single scope is created and shared for all instances of the same directive
            </summary>     
        </member>
        <member name="F:AngularJS.ScopeModes.Isolate">
            <summary>
            A new isolated scope is created and associated to the instance of the directive
            </summary>     
        </member>
        <member name="F:AngularJS.BindingStrategies.Unidirectional">
            <summary>
            Binds attribute to scope variable (unidirectionally)
            </summary>     
        </member>
        <member name="F:AngularJS.BindingStrategies.Bidirectional">
            <summary>
            Binds attribute to and from scope variable (bidirectionally)
            </summary>     
        </member>
        <member name="F:AngularJS.BindingStrategies.AsFunction">
            <summary>
            Scope variable is a function that evaluates the attribute
            </summary>     
        </member>
        <member name="M:AngularJS.ScopeBindings.#ctor(System.String)">
            <summary>
            Binds attribute to scope variable (unidirectionally)
            </summary>     
        </member>
        <member name="M:AngularJS.ScopeBindings.#ctor(System.String,System.String)">
            <summary>
            Binds attribute to scope variable (unidirectionally)
            </summary>     
        </member>
        <member name="F:AngularJS.DirectiveDefinitionHelper.Restrict">
            <summary>
            Target of DOM the directive applies (default=restrict to attribute only)
            </summary>     
        </member>
        <member name="F:AngularJS.DirectiveDefinitionHelper.Priority">
            <summary>
            The priority of compilation of the directive. 
            Directive with higher priority are compiled first. 
            The default priority is 0.
            </summary>     
        </member>
        <member name="F:AngularJS.DirectiveDefinitionHelper.Terminal">
            <summary>
            If set to true then the current priority will be the last set of directives which will execute 
            (any directives at the current priority will still execute as the order of execution on same priority is undefined).
            </summary>     
        </member>
        <member name="F:AngularJS.DirectiveDefinitionHelper.Template">
            <summary>
            Template HTML string that forms the directive body
            </summary>     
        </member>
        <member name="F:AngularJS.DirectiveDefinitionHelper.TemplateUrl">
            <summary>
            Url of the template HTML file used for the directive body
            </summary>     
        </member>
        <member name="F:AngularJS.DirectiveDefinitionHelper.Replace">
            <summary>
            specify where the template should be inserted. Defaults to false.
            true - the template will replace the current element.
            false - the template will replace the contents of the current element.
            </summary>     
        </member>
        <member name="F:AngularJS.DirectiveDefinitionHelper.Transclude">
            <summary>
            If true, specify that the original DOM content within the directive will be TRANSferred and inCLUDED 
            in the directive template where the <ng-transclude/> directive is placed.
            </summary>     
        </member>
        <member name="F:AngularJS.DirectiveDefinitionHelper.ScopeMode">
            <summary>
            Defines how the scope is associated with the directive
            </summary>     
        </member>
        <member name="M:AngularJS.DirectiveDefinitionHelper.Controller``1">
            <summary>
            A controller that is instantiated before the pre-linking phase and it is shared with other directives (see require attribute). 
            This allows the directives to communicate with each other and augment each other's behavior. 
            The controller is injectable (and supports bracket notation) with the following locals: $scope, $element, $attrs, $transclude
            </summary>
        </member>
        <member name="F:AngularJS.DirectiveDefinitionHelper.ControllerAs">
            <summary>
            "controller as" syntax alias for the directive controller
            </summary>
        </member>
        <member name="F:AngularJS.DirectiveDefinitionHelper.BindToController">
            <summary>
            When an isolate scope is used for a component, and controllerAs is used, allows a component to have its properties bound to the controller, 
            rather than to scope. When the controller is instantiated, the initial values of the isolate scope bindings are already available.
            </summary>
        </member>
        <member name="F:AngularJS.DirectiveDefinitionHelper.Compile">
            <summary>
            A compile function form manipulating the DOM. It may return an object with { pre, post} linking functions
            </summary>
        </member>
        <member name="M:AngularJS.DirectiveDefinitionHelper.CompileFunction(System.Action{AngularJS.jElement,AngularJS.Attributes})">
            <summary>
            Set Compile function
            </summary>
        </member>
        <member name="F:AngularJS.DirectiveDefinitionHelper.Link">
            <summary>
            Link function 
            </summary>
        </member>
        <member name="M:AngularJS.DirectiveDefinitionHelper.LinkFunction``1(System.Action{AngularJS.Scope,AngularJS.jElement,AngularJS.Attributes,``0})">
            <summary>
            Set Link function, specifying the type of the controller parameter
            </summary>
        </member>
        <member name="M:AngularJS.DirectiveDefinitionHelper.LinkFunction(System.Action{AngularJS.Scope,AngularJS.jElement,AngularJS.Attributes})">
            <summary>
            Set Link function with no controller parameter
            </summary>
        </member>
        <member name="M:AngularJS.DirectiveDefinitionHelper.LinkFunction``1(System.Action{AngularJS.Scope,System.Object,AngularJS.Attributes,``0})">
            <summary>
            Set Link function, specifying the type of the controller parameter
            </summary>
        </member>
        <member name="M:AngularJS.DirectiveDefinitionHelper.LinkFunction(System.Action{AngularJS.Scope,System.Object,AngularJS.Attributes})">
            <summary>
            Set Link function with no controller parameter
            </summary>
        </member>
        <member name="M:AngularJS.DirectiveDefinitionHelper.RequireDirective(System.String,System.Boolean,System.Boolean)">
            <summary>
            Require another directive and inject its controller as the fourth argument to the linking function. 
            <param name="ControllerName"></param>
            <param name="LookParent">Locate the required controller by searching the element's parents. Throw an error if not found.</param>
            <param name="Optional">Attempt to locate the required controller or pass null to the link fn if not found.</param>
            </summary>     
        </member>
        <member name="M:AngularJS.DirectiveDefinitionHelper.BindAttribute(System.String)">
            <summary>
            Binds attribute to scope variable (unidirectionally)
            </summary>     
        </member>
        <member name="M:AngularJS.DirectiveDefinitionHelper.BindAttribute(System.String,System.String)">
            <summary>
            Binds attribute to scope variable (unidirectionally)
            </summary>     
        </member>
        <member name="M:AngularJS.DirectiveDefinitionHelper.BindAttribute(System.String,AngularJS.BindingStrategies)">
            <summary>
            Binds attribute to scope variable
            </summary>     
        </member>
        <member name="M:AngularJS.DirectiveDefinitionHelper.BindAttribute(System.String,AngularJS.BindingStrategies,System.String)">
            <summary>
            Binds attribute to scope variable 
            </summary>     
        </member>
        <member name="M:AngularJS.Location.Replace">
            <summary>
            If called, all changes to $location during current $digest will be replacing current history record, instead of adding new one.
            </summary>
        </member>
        <member name="P:AngularJS.Location.AbsUrl">
            <summary>
            Returns full url representation with all segments encoded according to rules specified in RFC 3986.
            </summary>
        </member>
        <member name="P:AngularJS.Location.Hash">
            <summary>
            Sets or returns the hash fragment
            </summary>
        </member>
        <member name="P:AngularJS.Location.Host">
            <summary>
            Returns host of current url.
            </summary>
        </member>
        <member name="P:AngularJS.Location.Path">
            <summary>
            Sets or returns path of current url 
            </summary>
        </member>
        <member name="P:AngularJS.Location.Port">
            <summary>
            Returns port of current url.
            </summary>
        </member>
        <member name="P:AngularJS.Location.Protocol">
            <summary>
            Returns protocol of current url.
            </summary>
        </member>
        <member name="P:AngularJS.Location.Search">
            <summary>
            Sets or returns path of current url 
            </summary>
        </member>
        <member name="P:AngularJS.Location.Url">
            <summary>
            Sets or returns url
            </summary>
        </member>
        <member name="M:AngularJS.Scope.Apply">
            <summary>
            Executes an expression in angular from outside of the angular framework
            </summary>      
        </member>
        <member name="M:AngularJS.Scope.Apply``1(System.String)">
            <summary>
            Executes an expression in angular from outside of the angular framework
            </summary>      
        </member>
        <member name="M:AngularJS.Scope.Apply(System.Action{AngularJS.Scope})">
            <summary>
            Executes an expression in angular from outside of the angular framework
            </summary>      
        </member>
        <member name="M:AngularJS.Scope.Apply(System.Action)">
            <summary>
            Executes an expression in angular from outside of the angular framework
            </summary>      
        </member>
        <member name="M:AngularJS.Scope.Apply``1(System.Func{``0,AngularJS.Scope})">
            <summary>
            Executes an expression in angular from outside of the angular framework
            </summary>      
        </member>
        <member name="M:AngularJS.Scope.Broadcast(System.String,System.Object[])">
            <summary>
            Dispatches an event name downwards to all child scopes (and their children) notifying the registered listeners.
            </summary>            
        </member>
        <member name="M:AngularJS.Scope.Destroy">
            <summary>
            Removes the current scope (and all of its children) from the parent scope.
            </summary>                  
        </member>
        <member name="M:AngularJS.Scope.Digest">
            <summary>
            Processes all of the watchers of the current scope and its children.
            </summary>                  
        </member>
        <member name="M:AngularJS.Scope.Emit(System.String,System.Object[])">
            <summary>
            Dispatches an event name upwards through the scope hierarchy notifying the registered listeners.
            </summary>            
        </member>
        <member name="M:AngularJS.Scope.Eval``1(System.String)">
            <summary>
            Executes the expression on the current scope returning the result.
            </summary>      
        </member>
        <member name="M:AngularJS.Scope.Eval``1(System.Func{``0,AngularJS.Scope})">
            <summary>
            Executes the expression on the current scope returning the result.
            </summary>      
        </member>
        <member name="M:AngularJS.Scope.EvalAsync``1(System.String)">
            <summary>
            Executes the expression on the current scope at a later point in time.
            </summary>      
        </member>
        <member name="M:AngularJS.Scope.EvalAsync``1(System.Func{``0,AngularJS.Scope})">
            <summary>
            Executes the expression on the current scope at a later point in time.
            </summary>      
        </member>
        <member name="M:AngularJS.Scope.New(System.Boolean)">
            <summary>
            Creates a new child scope.
            </summary>      
        </member>
        <member name="M:AngularJS.Scope.On(System.String,System.Action{AngularJS.Event})">
            <summary>
            Listens on events of a given type.
            </summary>      
        </member>
        <member name="M:AngularJS.Scope.ControllerAs``1(System.String)">
            <summary>
            Access the controller class added to the $scope with the "controller as" syntax
            </summary>      
        </member>
        <member name="P:AngularJS.Module.Name">
            <summary>
            Name of the module
            </summary>
        </member>
        <member name="P:AngularJS.Module.Requires">
            <summary>
            List of module names which must be loaded before this module
            </summary>      
        </member>
        <member name="M:AngularJS.Angular.Module(System.String)">
            <summary>
            Retrieves an already existing module by its name
            </summary>      
        </member>
    </members>
</doc>
